-- Roblox Emotes GUI with Loading Animation and Toggle Button

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local ContextActionService = game:GetService("ContextActionService")
local StarterGui = game:GetService("StarterGui")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")

local LocalPlayer = Players.LocalPlayer
local Emotes = {}
local FavoriteEmotes = {}
local LoadedEmotes = {}
local Cursor = ""
local IsLoaded = false
local IsGUIVisible = false

-- Load favorites from local file
if isfile("FavoritedEmotes.txt") then
    local success, result = pcall(function()
        return HttpService:JSONDecode(readfile("FavoritedEmotes.txt"))
    end)
    if success then
        FavoriteEmotes = result
    end
end

-- Main GUI setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CustomEmotesGui"
ScreenGui.Parent = CoreGui

-- Loading frame
local LoadingFrame = Instance.new("Frame", ScreenGui)
LoadingFrame.Size = UDim2.new(0.3, 0, 0.1, 0)
LoadingFrame.Position = UDim2.new(0.35, 0, 0.1, 0)
LoadingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
LoadingFrame.BackgroundTransparency = 0.5
LoadingFrame.BorderSizePixel = 0

local UICorner = Instance.new("UICorner", LoadingFrame)
UICorner.CornerRadius = UDim.new(0.2, 0)

-- Loading text
local LoadingText = Instance.new("TextLabel", LoadingFrame)
LoadingText.Size = UDim2.new(1, 0, 1, 0)
LoadingText.Text = "Loading..."
LoadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadingText.Font = Enum.Font.GothamBold
LoadingText.TextScaled = true
LoadingText.BackgroundTransparency = 1

-- Tweening function for fade-in and fade-out animation
local function TweenTransparency(object, targetTransparency, duration)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
    local goal = {BackgroundTransparency = targetTransparency}
    local tween = TweenService:Create(object, tweenInfo, goal)
    tween:Play()
end

-- Function to animate the loading text
local function AnimateLoadingText()
    while not IsLoaded do
        LoadingText.Text = "Loading."
        wait(0.5)
        LoadingText.Text = "Loading.."
        wait(0.5)
        LoadingText.Text = "Loading..."
        wait(0.5)
    end
    LoadingText.Text = "Emotes Loaded"
end

-- Show loading frame with fade-in and fade-out animation
TweenTransparency(LoadingFrame, 0.5, 1) -- Fade in

-- Function to load emotes
local function LoadEmotes()
    local function RequestEmotes()
        local success, Response = pcall(function()
            return game:HttpGetAsync("https://catalog.roblox.com/v1/search/items/details?Category=12&Subcategory=39&SortType=1&limit=30&IncludeNotForSale=true&cursor="..Cursor)
        end)
        if not success then
            task.wait(5)
            return RequestEmotes()
        end
        return Response
    end

    local Response = RequestEmotes()
    local Body = HttpService:JSONDecode(Response)

    -- Process emotes
    for _, emoteData in pairs(Body.data) do
        table.insert(Emotes, {
            name = emoteData.name,
            id = emoteData.id
        })
    end

    -- Handle next page of emotes
    if Body.nextPageCursor then
        Cursor = Body.nextPageCursor
        LoadEmotes()
    else
        IsLoaded = true
    end
end

-- Function to build the GUI once all emotes are loaded
local function BuildEmoteGUI()
    -- Main scrollable frame for emotes
    local MainFrame = Instance.new("ScrollingFrame", ScreenGui)
    MainFrame.Size = UDim2.new(0.6, 0, 0.6, 0)
    MainFrame.Position = UDim2.new(0.2, 0, 0.2, 0)
    MainFrame.BackgroundTransparency = 0.5
    MainFrame.ScrollBarThickness = 5
    MainFrame.Visible = false -- Hide initially

    -- UI grid layout for buttons
    local EmoteGrid = Instance.new("UIGridLayout", MainFrame)
    EmoteGrid.CellSize = UDim2.new(0.15, 0, 0.15, 0)
    EmoteGrid.CellPadding = UDim2.new(0.01, 0, 0.01, 0)

    -- Create emote buttons
    for _, emoteData in pairs(Emotes) do
        local EmoteButton = Instance.new("TextButton", MainFrame)
        EmoteButton.Size = UDim2.new(0.15, 0, 0.15, 0)
        EmoteButton.Text = emoteData.name
        EmoteButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        EmoteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        EmoteButton.BackgroundTransparency = 0.5
        EmoteButton.BorderSizePixel = 0

        local UICorner = Instance.new("UICorner", EmoteButton)
        UICorner.CornerRadius = UDim.new(0.2, 0)

        -- Play emote on click
        EmoteButton.MouseButton1Click:Connect(function()
            local Humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if Humanoid and Humanoid.RigType == Enum.HumanoidRigType.R15 then
                pcall(function()
                    Humanoid:PlayEmoteAndGetAnimTrackById(emoteData.id)
                end)
            else
                StarterGui:SetCore("SendNotification", {
                    Title = "R6 Rig Type Not Supported",
                    Text = "Emotes can only be played on R15 characters.",
                    Duration = 5
                })
            end
        end)
    end

    -- Update canvas size for scrolling
    MainFrame.CanvasSize = UDim2.new(0, 0, 0, EmoteGrid.AbsoluteContentSize.Y)

    -- Toggle button to show and hide the emote GUI
    local ToggleButton = Instance.new("TextButton", ScreenGui)
    ToggleButton.Size = UDim2.new(0.1, 0, 0.05, 0)
    ToggleButton.Position = UDim2.new(0.9, -50, 0.9, -50)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    ToggleButton.BackgroundTransparency = 0.5
    ToggleButton.Text = "Show Emotes"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.TextScaled = true
    local ToggleCorner = Instance.new("UICorner", ToggleButton)
    ToggleCorner.CornerRadius = UDim.new(0.2, 0)

    -- Toggle the emote GUI visibility
    ToggleButton.MouseButton1Click:Connect(function()
        IsGUIVisible = not IsGUIVisible
        MainFrame.Visible = IsGUIVisible
        ToggleButton.Text = IsGUIVisible and "Hide Emotes" or "Show Emotes"
    end)
end

-- Load emotes and display loading text animation
spawn(function()
    AnimateLoadingText() -- Animate the loading text in a separate thread
end)
LoadEmotes()

-- Wait for emotes to finish loading
repeat wait() until IsLoaded

-- Build the GUI and hide the loading frame with fade-out animation
BuildEmoteGUI()
TweenTransparency(LoadingFrame, 1, 1) -- Fade out
wait(1)
LoadingFrame:Destroy()
