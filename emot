-- Keybind to open for PC is "comma" -> " , "
-- Made by Gi#7331

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Tips!",
    Text = "Wait 1 - 15 seconds to show GUI. If it doesn't show, try executing again.",
    Duration = 15
})

if game:GetService("CoreGui"):FindFirstChild("Emotes") then
    game:GetService("CoreGui"):FindFirstChild("Emotes"):Destroy()
end

wait(1)

local ContextActionService = game:GetService("ContextActionService")
local HttpService = game:GetService("HttpService")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")

local Emotes = {}
local LoadedEmotes = {}

-- Function to add an emote to the Emotes table
local function AddEmote(name: string, id: IntValue, price: IntValue?)
    LoadedEmotes[id] = false
    task.spawn(function()
        if not (name and id) then
            return
        end
        local success, date = pcall(function()
            local info = MarketplaceService:GetProductInfo(id)
            local updated = info.Updated
            return DateTime.fromIsoDate(updated):ToUniversalTime()
        end)
        if not success then
            task.wait(10)
            AddEmote(name, id, price)
            return
        end
        local unix = os.time({
            year = date.Year,
            month = date.Month,
            day = date.Day,
            hour = date.Hour,
            min = date.Minute,
            sec = date.Second
        })
        LoadedEmotes[id] = true
        table.insert(Emotes, {
            ["name"] = name,
            ["id"] = id,
            ["icon"] = "rbxthumb://type=Asset&id=".. id .."&w=150&h=150",
            ["price"] = price or 0,
            ["lastupdated"] = unix,
            ["sort"] = {}
        })
    end)
end

local CurrentSort = "recentfirst"
local FavoriteOff = "rbxassetid://10651060677"
local FavoriteOn = "rbxassetid://10651061109"
local FavoritedEmotes = {}

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "Emotes"
ScreenGui.DisplayOrder = 2
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = CoreGui -- Ensure it is parented properly

-- Loading Screen
local LoadingFrame = Instance.new("Frame", ScreenGui)
LoadingFrame.Size = UDim2.new(0.3, 0, 0.1, 0)
LoadingFrame.Position = UDim2.new(0.35, 0, 0.4, 0) -- Centered
LoadingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
LoadingFrame.BackgroundTransparency = 0.5
LoadingFrame.BorderSizePixel = 0

local UICorner = Instance.new("UICorner", LoadingFrame)
UICorner.CornerRadius = UDim.new(0.2, 0)

local LoadingText = Instance.new("TextLabel", LoadingFrame)
LoadingText.Size = UDim2.new(1, 0, 1, 0)
LoadingText.Text = "Loading Emotes..."
LoadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadingText.Font = Enum.Font.GothamBold
LoadingText.TextScaled = true
LoadingText.BackgroundTransparency = 1

-- Main GUI Frame (Emote List)
local BackFrame = Instance.new("Frame")
BackFrame.Size = UDim2.new(0.8, 0, 0.6, 0) -- Responsive size for both PC and mobile
BackFrame.AnchorPoint = Vector2.new(0.5, 0.5)
BackFrame.Position = UDim2.new(0.5, 0, 0.5, 0) -- Centered
BackFrame.BackgroundTransparency = 0.2
BackFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
BackFrame.BorderSizePixel = 0
BackFrame.Parent = ScreenGui
BackFrame.Visible = false -- Hide until loaded

-- UI aspect ratio constraint to ensure it scales well on mobile and PC
local AspectRatio = Instance.new("UIAspectRatioConstraint", BackFrame)
AspectRatio.AspectRatio = 1.6 -- Width to height ratio

-- Emote Scrolling Frame (where the emotes will be displayed)
local EmoteScrollFrame = Instance.new("ScrollingFrame", BackFrame)
EmoteScrollFrame.Size = UDim2.new(1, 0, 0.9, 0)
EmoteScrollFrame.Position = UDim2.new(0, 0, 0.1, 0)
EmoteScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
EmoteScrollFrame.BackgroundTransparency = 1
EmoteScrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

local GridLayout = Instance.new("UIGridLayout", EmoteScrollFrame)
GridLayout.CellSize = UDim2.new(0.1, 0, 0.1, 0)
GridLayout.CellPadding = UDim2.new(0.01, 0, 0.01, 0)

-- Toggle Button for opening/closing GUI (Will be displayed after loading)
local Open = Instance.new("TextButton")
Open.Name = "Open"
Open.Parent = ScreenGui
Open.Size = UDim2.new(0.1, 0, 0.05, 0)
Open.Position = UDim2.new(0.9, -50, 0.05, 0) -- Positioned at the top-right
Open.Text = "Open"
Open.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Open.TextColor3 = Color3.fromRGB(255, 255, 255)
Open.TextScaled = true
Open.BackgroundTransparency = 0.5
Open.Visible = false -- Hide until emotes are loaded

-- Button functionality to toggle the emote frame
Open.MouseButton1Up:Connect(function()
    if Open.Text == "Open" then
        Open.Text = "Close"
        BackFrame.Visible = true
    else
        Open.Text = "Open"
        BackFrame.Visible = false
    end
end)

UICorner.Name = "UICorner"
UICorner.Parent = Open
UICorner.CornerRadius = UDim.new(1, 0)

-- Function to load emotes and create buttons for them
local function LoadEmotes()
    for _, emote in pairs(Emotes) do
        -- Create an emote button
        local EmoteButton = Instance.new("ImageButton", EmoteScrollFrame)
        EmoteButton.Image = emote.icon
        EmoteButton.Name = emote.name
        EmoteButton.BackgroundTransparency = 0.5
        EmoteButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

        -- Add functionality to play emote when button is clicked
        EmoteButton.MouseButton1Click:Connect(function()
            local Humanoid = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            local Description = Humanoid and Humanoid:FindFirstChildOfClass("HumanoidDescription")
            if Description then
                Humanoid:PlayEmoteAndGetAnimTrackById(emote.id)
            end
        end)
    end
end

-- Fetch Emotes Logic
local Cursor = ""
while true do
    local function Request()
        local success, Response = pcall(function()
            return game:HttpGetAsync("https://catalog.roblox.com/v1/search/items/details?Category=12&Subcategory=39&SortType=1&SortAggregation=&limit=30&IncludeNotForSale=true&cursor=".. Cursor)
        end)
        if not success then
            task.wait(10)
            return Request()
        end
        return Response
    end

    local Response = Request()
    local Body = HttpService:JSONDecode(Response)
    for i,v in pairs(Body.data) do
        AddEmote(v.name, v.id, v.price)
    end
    if Body.nextPageCursor ~= nil then
        Cursor = Body.nextPageCursor
    else
        break
    end
end

-- Wait for all emotes to load before hiding the loading screen and showing the GUI
local function EmotesLoaded()
    for _, loaded in pairs(LoadedEmotes) do
        if not loaded then
            return false
        end
    end
    return true
end

while not EmotesLoaded() do
    task.wait()
end

-- Emotes loaded, now hide loading screen and show the toggle button
LoadingFrame:Destroy()
Open.Visible = true

-- Now create the emote buttons
LoadEmotes()

-- Send notification once done
StarterGui:SetCore("SendNotification", {
    Title = "Done!",
    Text = "Emotes GUI is ready!",
    Duration = 10
})
