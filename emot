-- Keybind to open for PC is "comma" -> " , "
-- Made by Gi#7331

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Tips!",
    Text = "Wait 1 - 15 seconds for the GUI to load. If it doesn't show, try executing again.",
    Duration = 15
})

-- Clean up any existing GUI
if game:GetService("CoreGui"):FindFirstChild("Emotes") then
    game:GetService("CoreGui"):FindFirstChild("Emotes"):Destroy()
end

-- Wait for the game to fully load
wait(1)

-- Services
local ContextActionService = game:GetService("ContextActionService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")

-- Variables
local Emotes = {}
local LoadedEmotes = {}
local FavoritedEmotes = {}

-- Favorite icons
local FavoriteOff = "rbxassetid://10651060677"
local FavoriteOn = "rbxassetid://10651061109"

-- Add Emote to the list
local function AddEmote(name: string, id: IntValue, price: IntValue?)
    LoadedEmotes[id] = false
    task.spawn(function()
        if not (name and id) then
            return
        end
        local success, date = pcall(function()
            local info = MarketplaceService:GetProductInfo(id)
            local updated = info.Updated
            return DateTime.fromIsoDate(updated):ToUniversalTime()
        end)
        if not success then
            task.wait(10)
            AddEmote(name, id, price)
            return
        end
        local unix = os.time({
            year = date.Year,
            month = date.Month,
            day = date.Day,
            hour = date.Hour,
            min = date.Minute,
            sec = date.Second
        })
        LoadedEmotes[id] = true
        table.insert(Emotes, {
            ["name"] = name,
            ["id"] = id,
            ["icon"] = "rbxthumb://type=Asset&id=".. id .."&w=150&h=150",
            ["price"] = price or 0,
            ["lastupdated"] = unix
        })
    end)
end

-- UI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "Emotes"
ScreenGui.DisplayOrder = 2
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = CoreGui -- Set the parent to CoreGui

-- Loading Frame
local LoadingFrame = Instance.new("Frame", ScreenGui)
LoadingFrame.Size = UDim2.new(0.3, 0, 0.1, 0)
LoadingFrame.Position = UDim2.new(0.35, 0, 0.4, 0)
LoadingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
LoadingFrame.BackgroundTransparency = 0.5
LoadingFrame.BorderSizePixel = 0

local UICorner = Instance.new("UICorner", LoadingFrame)
UICorner.CornerRadius = UDim.new(0.2, 0)

local LoadingText = Instance.new("TextLabel", LoadingFrame)
LoadingText.Size = UDim2.new(1, 0, 1, 0)
LoadingText.Text = "Loading Emotes..."
LoadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadingText.Font = Enum.Font.GothamBold
LoadingText.TextScaled = true
LoadingText.BackgroundTransparency = 1

-- Main Frame (Emotes)
local BackFrame = Instance.new("Frame", ScreenGui)
BackFrame.Size = UDim2.new(0.8, 0, 0.6, 0)
BackFrame.AnchorPoint = Vector2.new(0.5, 0.5)
BackFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
BackFrame.BackgroundTransparency = 1
BackFrame.BorderSizePixel = 0
BackFrame.Visible = false
BackFrame.Active = true
BackFrame.Draggable = true

-- Emote Name Display
local EmoteName = Instance.new("TextLabel", BackFrame)
EmoteName.Size = UDim2.new(0.5, 0, 0.05, 0)
EmoteName.Position = UDim2.new(0.25, 0, 0, 0)
EmoteName.BackgroundTransparency = 1
EmoteName.Text = ""
EmoteName.TextColor3 = Color3.fromRGB(255, 255, 255)
EmoteName.Font = Enum.Font.GothamBold
EmoteName.TextScaled = true

-- Scrolling Frame for Emotes
local EmoteScrollFrame = Instance.new("ScrollingFrame", BackFrame)
EmoteScrollFrame.Size = UDim2.new(1, 0, 0.9, 0)
EmoteScrollFrame.Position = UDim2.new(0, 0, 0.1, 0)
EmoteScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
EmoteScrollFrame.BackgroundTransparency = 1
EmoteScrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

local GridLayout = Instance.new("UIGridLayout", EmoteScrollFrame)
GridLayout.CellSize = UDim2.new(0.1, 0, 0.1, 0)
GridLayout.CellPadding = UDim2.new(0.01, 0, 0.01, 0)

-- Toggle Button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Size = UDim2.new(0.1, 0, 0.05, 0)
ToggleButton.Position = UDim2.new(0.9, -10, 0.9, -10) -- Bottom-right
ToggleButton.Text = "Open"
ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextScaled = true
ToggleButton.Parent = ScreenGui
ToggleButton.Visible = false -- Hidden until emotes are loaded
ToggleButton.Active = true
ToggleButton.Draggable = true

-- Toggle Button functionality
ToggleButton.MouseButton1Click:Connect(function()
    if BackFrame.Visible then
        BackFrame.Visible = false
        ToggleButton.Text = "Open"
    else
        BackFrame.Visible = true
        ToggleButton.Text = "Close"
    end
end)

-- Function to load emotes
local function LoadEmotes()
    for _, emote in pairs(Emotes) do
        -- Create the button for each emote
        local EmoteButton = Instance.new("ImageButton", EmoteScrollFrame)
        EmoteButton.Image = emote.icon
        EmoteButton.Name = emote.name
        EmoteButton.BackgroundTransparency = 0.5 -- 50% transparency
        EmoteButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

        -- Play the emote on button press
        EmoteButton.MouseButton1Click:Connect(function()
            local Humanoid = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            local Description = Humanoid and Humanoid:FindFirstChildOfClass("HumanoidDescription")
            if Description then
                Humanoid:PlayEmoteAndGetAnimTrackById(emote.id)
                BackFrame.Visible = false
                ToggleButton.Text = "Open"
            end
        end)

        -- Update emote name when hovering or pressing
        EmoteButton.MouseEnter:Connect(function()
            EmoteName.Text = emote.name
        end)
        EmoteButton.MouseLeave:Connect(function()
            EmoteName.Text = ""
        end)
    end
end

-- Check if emotes are fully loaded
local function EmotesLoaded()
    for _, loaded in pairs(LoadedEmotes) do
        if not loaded then
            return false
        end
    end
    return true
end

-- Wait for all emotes to load, then display the toggle button and hide the loading screen
local function WaitForEmotes()
    while not EmotesLoaded() do
        task.wait()
    end
    LoadingFrame:Destroy() -- Remove the loading screen
    ToggleButton.Visible = true -- Show the toggle button
    LoadEmotes() -- Load and display the emote buttons
end

-- Sample emotes (can be replaced by actual API calls)
AddEmote("Wave", 5915773155)
AddEmote("Dance", 5915779725)
AddEmote("Jump", 9830731012)

WaitForEmotes() -- Start loading emotes

-- Final notification
StarterGui:SetCore("SendNotification", {
    Title = "Done!",
    Text = "Emotes GUI is ready!",
    Duration = 10
})
